package tech.onega.jvm.std.crypto;

import java.util.Arrays;
import org.testng.annotations.Test;
import tech.onega.jvm.std.lang.RandUtils;
import tech.onega.jvm.std.struct.bytes.IBytes;
import tech.onega.jvm.std.validate.Check;

public class ThreeFishTest {

  private static void assertEncrypt(final int bits, final int dataLength) {
    final var key = RandUtils.randIBytes(bits / 8);
    final var data = RandUtils.randIBytes(dataLength);
    final var encrypted = ThreeFish.encrypt(bits, key, data);
    final var decrypted = ThreeFish.decrypt(bits, key, encrypted);
    Check.equals(encrypted.length(), ThreeFish.encryptLength(bits, data.length()));
    Check.equals(data, decrypted);
  }

  @Test
  public static void testDecoder() {
    final var bits = ThreeFish.BITS_256;
    for (var i = 0; i < 10_00; i++) {
      final var key = RandUtils.randIBytes(bits / 8);
      final var dataLength = RandUtils.randInt(128, 1024 * 4);
      final var data = RandUtils.randIBytes(dataLength);
      final var encrypted = ThreeFish.encrypt(bits, key, data);
      final var writer = IBytes.createWriter();
      final var decoder = new ThreeFish.Decoder(bits, key, writer::write);
      final var reader = encrypted.asReader();
      final var readBuffer = new byte[RandUtils.randInt(4, 68)];
      var totalReaded = 0;
      while (!reader.eof()) {
        final var readLimit = RandUtils.randInt(1, readBuffer.length);
        final var readed = reader.read(readBuffer, readLimit, 0);
        decoder.decode(readBuffer, readed, 0);
        totalReaded += readed;
      }
      decoder.end();
      final var writerBytes = writer.toIBytes();
      Check.equals(totalReaded, encrypted.length());
      Check.equals(data, writerBytes);
    }
  }

  @Test
  public void testDecrypt1024() {
    final var bits = 1024;
    final var key = IBytes.wrap(new byte[] {
      -122, 8, 14, -10, 32, 40, -107, -55, -111, 114, 54, -4, -8, 112, 5,
      -32, 46, -36, 76, 77, -56, 122, 59, -80, 66, -45, -96, 54, -28, -63,
      10, 4, -30, -77, 120, -120, 116, -32, 3, -7, 22, 87, 113, 25, -127,
      -25, 84, -95, 110, -47, -43, 83, -23, 32, -60, -126, 5, 42, 61, -38,
      30, 36, -95, -35, 29, -3, -23, -2, 105, 12, -13, -7, -63, -48, -68,
      88, 124, -122, 102, -14, 17, -8, -103, -99, 126, 66, 114, 81, 65, 107,
      -52, -92, 50, 85, 25, -29, 17, 37, -92, -28, -17, 63, -32, 20, -36, 15,
      56, -126, -52, 76, 49, 105, 33, 95, -5, -126, 84, 85, 72, -127, 38, 59,
      -66, -86, -23, -27, -23, -67
    });
    final var data = IBytes.wrap(new byte[] {
      89, -2, 123, 98, -8, 124, 15, -87, -61, -96, -94, 13, -15, 46, 116, -35,
      -27, 95, 121, -6, -63, 81, -99, 104, -74, 61, -124, 119, 81, 109, 49, 37,
      40, -5, -15, 121, 95, 91, 1, -126, 77, 19, 68, -114, 26, -87, 124, -113,
      -91, 12, -75, -9, -86, -111, 5, 68, 81, 22, 8, 54, -126, -25, 27, -39, 76,
      71, 52, 44, -74, 66, 93, 2, -123, 20, 16, 101, 31, -12, 107, 80, -76, 95,
      -56, 13, -88, 11, -13, 38, 123, 123, 5, 37, -17, 103, 18, 47, 85, -94, 76,
      24, -53, -75, 19, -37, 13, 1, 103, 3, 83, 66, 36, -51, -35, -66, 41, 20,
      -119, 14, 122, -77, 30, -27, 110, -17, 62, 26, 73, 84
    });
    final var encrypted = IBytes.wrap(new byte[] {
      113, 6, 101, 48, -40, -128, 17, -54, -15, -55, 9, -37, -81, -90, -32, -6,
      23, 9, -105, -6, 39, -34, -72, 50, -8, -127, -17, 43, -2, -91, 67, -111,
      -42, 109, 66, -72, 6, 70, -48, -93, 77, 21, 68, -66, -118, 63, -24, 20, 45,
      -21, 120, 118, -9, -75, 6, 84, 104, -34, 21, -20, 100, 36, -56, -95, 95, -90,
      -95, -52, 50, -77, -57, 115, 88, 33, 92, 10, 43, -9, 69, -19, -43, -74, 68,
      -36, -67, 80, 115, 33, 41, 30, -21, -99, 18, 10, 13, 71, 65, 14, 64, -114, -111,
      -15, -126, 0, -110, -9, 60, -46, -84, -40, 92, 111, 104, 8, -123, -43, -104, -91,
      -123, 95, 23, -37, -113, -85, 28, -85, 115, 19, 57, -6, 84, 75, -82, -28, 46, 93,
      56, -80, -109, 69, 124, 126, -101, -117, -43, -119, 69, 49, 108, 96, 30, 3, -101,
      -69, 105, -65, -6, -104, -42, -31, -123, 39, -103, -32, -22, -63, -104, 9, 12, -73,
      78, 57, 15, 30, -72, -41, 50, -11, -103, -80, 5, -122, 93, 11, 70, 5, 97, 87, -3,
      88, -60, -15, -29, 52, 82, 68, -125, 118, -61, -60, 58, -43, -60, -29, -9, -99, 70,
      -79, 54, 99, -96, 87, -81, -16, -1, -4, -27, 85, -62, -89, 121, -3, 35, 103, -117,
      34, -111, -52, -10, -84, -40, -1, 83, 99, -39, 51, 41, -45, 98, 24, -27, -68, 46,
      0, 27, -39, 65, 111, 82, 58, 26, 112, 110, 11, 94, 70
    });
    Check.equals(ThreeFish.decrypt(bits, key, encrypted), data);
  }

  @Test
  public void testDecrypt256() {
    final var bits = 256;
    final var key = IBytes.wrap(new byte[] {
      72, -59, 65, 92, 73, -34, 6, -111, 0, 5, 73, 67, -23, -106, -30, -66,
      91, -96, 9, -89, -63, -107, 51, -35, 62, -17, 85, 112, 41, 61, -60, 100
    });
    final var data = IBytes.wrap(new byte[] {
      -34, 103, -52, 127, 59, -80, -103, 37, -20, 26, 117, -31, -109, -81,
      29, 12, -79, 17, -122, -33, -83, -16, 76, 55, 94, 39, -25, 89, 67, -25, 28, 111,
      -34, 103, -52, 127, 59, -80, -103, 37, -20, 26, 117, -31, -109, -81
    });
    final var encrypted = IBytes.wrap(new byte[] {
      112, -106, 99, 72, -110, 116, -32, -74, -32, -21, -84, 2, -69, -28, 76, -70, 78,
      19, 43, 90, -14, 76, 23, -99, -100, 63, -77, 9, -41, -102, -17, 102, -113, -83,
      25, -76, -127, 10, -127, -58, 60, -17, -16, -80, -101, -122, -47, 85, 52,
      29, 49, 24, -118, -39, 1, 38, 78, -107, 63, 78, 123, -29, 28, -29
    });
    Check.equals(ThreeFish.decrypt(bits, key, encrypted), data);
  }

  @Test
  public void testDecrypt512() {
    final var bits = 512;
    final var key = IBytes.wrap(new byte[] {
      20, -115, -23, -94, 45, 87, 60, 34, 43, 73, 67, 58, 20, 50, -31, 88,
      55, -85, 54, 17, 86, -44, 75, 10, 5, -65, 116, -32, -92, 4, 42, -29,
      100, -112, 13, -38, -35, -95, -6, 12, -52, -108, -105, -87, 125, -21,
      58, 36, -23, -24, -110, -25, 3, -94, 22, 36, -87, 10, -112, -15, 16,
      -27, -11, 118
    });
    final var data = IBytes.wrap(new byte[] {
      46, -54, -99, -16, -25, -72, 86, -73, -120, 87, 43, 110, 12, 82, 72,
      118, -71, -95, -20, 65, -28, -27, -58, -8, -46, 52, -32, 84, -20, -53,
      -34, -99, -59, 30, -110, 41, -56, 27, 41, 35, 33, -9, 96, -70, 73, 29,
      -44, -102, 36, -47, 43, -45, -74, -39, -71, -38, 59, -100, 103, -125,
      -68, 0, -17, 64
    });
    final var encrypted = IBytes.wrap(new byte[] {
      90, -16, 82, 72, 100, 51, 7, -35, 16, -88, -65, 127, -65, 34, 69, 125,
      25, 51, -74, -63, 55, -51, 66, -86, -90, 46, 2, -51, 103, -121, 15, 123,
      -110, 56, 46, 38, 68, 87, -18, -15, 49, 25, -95, 56, 14, -18, 59, 23,
      90, 37, -47, 48, 126, -78, 42, 33, -56, 9, -11, 115, 113, -43, 116, 6,
      102, -77, -109, -110, 113, -45, -94, 23, -63, -10, 25, 96, -92, 57, -89,
      -88, -117, -80, 84, 117, 60, -104, -107, -45, -18, 95, -72, -93, -32,
      -47, 105, 126, -123, 48, 29, 119, -127, 123, -8, 67, 59, 74, -35, -9,
      -12, 67, -98, 114, -52, -54, -70, 123, 126, 78, -76, -38, 41, 27, 9, 105,
      82, -70, -96, -75
    });
    Check.equals(ThreeFish.decrypt(bits, key, encrypted), data);
  }

  @Test
  public void testEncrypt() {
    final var iters = 1_00;
    final var dataLengthMin = 1;
    final var dataLengthMax = 1024;
    final var bits = new int[] { 256, 512, 1024 };
    for (var i = 0; i < iters; i++) {
      final var dataLength = RandUtils.randInt(dataLengthMin, dataLengthMax);
      for (final var bit : bits) {
        assertEncrypt(bit, dataLength);
      }
    }
  }

  @Test
  public void testEncrypt1024() {
    final var bits = 1024;
    final var key = IBytes.wrap(new byte[] { //128
      -122, 8, 14, -10, 32, 40, -107, -55, -111, 114, 54, -4, -8, 112, 5,
      -32, 46, -36, 76, 77, -56, 122, 59, -80, 66, -45, -96, 54, -28, -63,
      10, 4, -30, -77, 120, -120, 116, -32, 3, -7, 22, 87, 113, 25, -127,
      -25, 84, -95, 110, -47, -43, 83, -23, 32, -60, -126, 5, 42, 61, -38,
      30, 36, -95, -35, 29, -3, -23, -2, 105, 12, -13, -7, -63, -48, -68,
      88, 124, -122, 102, -14, 17, -8, -103, -99, 126, 66, 114, 81, 65, 107,
      -52, -92, 50, 85, 25, -29, 17, 37, -92, -28, -17, 63, -32, 20, -36, 15,
      56, -126, -52, 76, 49, 105, 33, 95, -5, -126, 84, 85, 72, -127, 38, 59,
      -66, -86, -23, -27, -23, -67
    });
    final var data = IBytes.wrap(new byte[] { //128
      89, -2, 123, 98, -8, 124, 15, -87, -61, -96, -94, 13, -15, 46, 116, -35,
      -27, 95, 121, -6, -63, 81, -99, 104, -74, 61, -124, 119, 81, 109, 49, 37,
      40, -5, -15, 121, 95, 91, 1, -126, 77, 19, 68, -114, 26, -87, 124, -113,
      -91, 12, -75, -9, -86, -111, 5, 68, 81, 22, 8, 54, -126, -25, 27, -39, 76,
      71, 52, 44, -74, 66, 93, 2, -123, 20, 16, 101, 31, -12, 107, 80, -76, 95,
      -56, 13, -88, 11, -13, 38, 123, 123, 5, 37, -17, 103, 18, 47, 85, -94, 76,
      24, -53, -75, 19, -37, 13, 1, 103, 3, 83, 66, 36, -51, -35, -66, 41, 20,
      -119, 14, 122, -77, 30, -27, 110, -17, 62, 26, 73, 84
    });
    final var encrypted = new byte[] { //256
      113, 6, 101, 48, -40, -128, 17, -54, -15, -55, 9, -37, -81, -90, -32, -6,
      23, 9, -105, -6, 39, -34, -72, 50, -8, -127, -17, 43, -2, -91, 67, -111,
      -42, 109, 66, -72, 6, 70, -48, -93, 77, 21, 68, -66, -118, 63, -24, 20, 45,
      -21, 120, 118, -9, -75, 6, 84, 104, -34, 21, -20, 100, 36, -56, -95, 95, -90,
      -95, -52, 50, -77, -57, 115, 88, 33, 92, 10, 43, -9, 69, -19, -43, -74, 68,
      -36, -67, 80, 115, 33, 41, 30, -21, -99, 18, 10, 13, 71, 65, 14, 64, -114, -111,
      -15, -126, 0, -110, -9, 60, -46, -84, -40, 92, 111, 104, 8, -123, -43, -104, -91,
      -123, 95, 23, -37, -113, -85, 28, -85, 115, 19, 57, -6, 84, 75, -82, -28, 46, 93,
      56, -80, -109, 69, 124, 126, -101, -117, -43, -119, 69, 49, 108, 96, 30, 3, -101,
      -69, 105, -65, -6, -104, -42, -31, -123, 39, -103, -32, -22, -63, -104, 9, 12, -73,
      78, 57, 15, 30, -72, -41, 50, -11, -103, -80, 5, -122, 93, 11, 70, 5, 97, 87, -3,
      88, -60, -15, -29, 52, 82, 68, -125, 118, -61, -60, 58, -43, -60, -29, -9, -99, 70,
      -79, 54, 99, -96, 87, -81, -16, -1, -4, -27, 85, -62, -89, 121, -3, 35, 103, -117,
      34, -111, -52, -10, -84, -40, -1, 83, 99, -39, 51, 41, -45, 98, 24, -27, -68, 46,
      0, 27, -39, 65, 111, 82, 58, 26, 112, 110, 11, 94, 70
    };
    final var result = ThreeFish.encrypt(bits, key, data).toArray();//256
    Check.equals(Arrays.copyOf(encrypted, 128), Arrays.copyOf(result, 128));
  }

  @Test
  public void testEncrypt256() {
    final var bits = 256;
    final var key = IBytes.wrap(new byte[] { //32
      72, -59, 65, 92, 73, -34, 6, -111, 0, 5, 73, 67, -23, -106, -30, -66,
      91, -96, 9, -89, -63, -107, 51, -35, 62, -17, 85, 112, 41, 61, -60, 100
    });
    final var data = IBytes.wrap(new byte[] { //46
      -34, 103, -52, 127, 59, -80, -103, 37, -20, 26, 117, -31, -109, -81,
      29, 12, -79, 17, -122, -33, -83, -16, 76, 55, 94, 39, -25, 89, 67, -25, 28, 111,
      -34, 103, -52, 127, 59, -80, -103, 37, -20, 26, 117, -31, -109, -81
    });
    final var encrypted = new byte[] { //64
      112, -106, 99, 72, -110, 116, -32, -74, -32, -21, -84, 2, -69, -28, 76, -70, 78,
      19, 43, 90, -14, 76, 23, -99, -100, 63, -77, 9, -41, -102, -17, 102, -113, -83,
      25, -76, -127, 10, -127, -58, 60, -17, -16, -80, -101, -122, -47, 85, 52,
      29, 49, 24, -118, -39, 1, 38, 78, -107, 63, 78, 123, -29, 28, -29
    };
    final var result = ThreeFish.encrypt(bits, key, data).toArray();//64
    Check.equals(Arrays.copyOf(encrypted, 32), Arrays.copyOf(result, 32));
  }

  @Test
  public void testEncrypt512() {
    final var bits = 512;
    final var key = IBytes.wrap(new byte[] { //64
      20, -115, -23, -94, 45, 87, 60, 34, 43, 73, 67, 58, 20, 50, -31, 88,
      55, -85, 54, 17, 86, -44, 75, 10, 5, -65, 116, -32, -92, 4, 42, -29,
      100, -112, 13, -38, -35, -95, -6, 12, -52, -108, -105, -87, 125, -21,
      58, 36, -23, -24, -110, -25, 3, -94, 22, 36, -87, 10, -112, -15, 16,
      -27, -11, 118
    });
    final var data = IBytes.wrap(new byte[] { //64
      46, -54, -99, -16, -25, -72, 86, -73, -120, 87, 43, 110, 12, 82, 72,
      118, -71, -95, -20, 65, -28, -27, -58, -8, -46, 52, -32, 84, -20, -53,
      -34, -99, -59, 30, -110, 41, -56, 27, 41, 35, 33, -9, 96, -70, 73, 29,
      -44, -102, 36, -47, 43, -45, -74, -39, -71, -38, 59, -100, 103, -125,
      -68, 0, -17, 64
    });
    final var encrypted = new byte[] { //128
      90, -16, 82, 72, 100, 51, 7, -35, 16, -88, -65, 127, -65, 34, 69, 125,
      25, 51, -74, -63, 55, -51, 66, -86, -90, 46, 2, -51, 103, -121, 15, 123,
      -110, 56, 46, 38, 68, 87, -18, -15, 49, 25, -95, 56, 14, -18, 59, 23,
      90, 37, -47, 48, 126, -78, 42, 33, -56, 9, -11, 115, 113, -43, 116, 6,
      102, -77, -109, -110, 113, -45, -94, 23, -63, -10, 25, 96, -92, 57, -89,
      -88, -117, -80, 84, 117, 60, -104, -107, -45, -18, 95, -72, -93, -32,
      -47, 105, 126, -123, 48, 29, 119, -127, 123, -8, 67, 59, 74, -35, -9,
      -12, 67, -98, 114, -52, -54, -70, 123, 126, 78, -76, -38, 41, 27, 9, 105,
      82, -70, -96, -75
    };
    final var result = ThreeFish.encrypt(bits, key, data).toArray();//128
    Check.equals(Arrays.copyOf(encrypted, 64), Arrays.copyOf(result, 64));
  }

}
